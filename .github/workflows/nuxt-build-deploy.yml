name: Nuxt Build and Deploy

on:
  push:
    branches:
      - publish/*
      # 複数ブランチを指定する場合は配列形式で
      # - develop
      # - feature/*  # ワイルドカードも使用可能

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: front

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Generate static files
        run: bun run generate

      - name: Get current date
        id: date
        run: echo "date=$(date +'%Y%m%d-%H%M%S')" >> $GITHUB_OUTPUT

      - name: Get branch name
        id: branch
        run: echo "branch=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT

      - name: Debug directory structure
        run: |
          echo "Current directory: $(pwd)"
          echo "Directory listing of current directory:"
          ls -la
          echo "Content of .output directory (if exists):"
          ls -la .output || echo ".output directory not found"
          echo "Content of dist directory (if exists):"
          ls -la dist || echo "dist directory not found"
          echo "Full directory tree:"
          tree -a || find . -type d

      - name: Generate static files
        run: |
          echo "Starting static file generation..."
          bun run generate
          echo "Generation completed. Checking output directories:"
          pwd
          ls -la
          echo "Checking .output directory:"
          ls -la .output || echo ".output directory not found"

      - name: Deploy to GitHub Pages branch
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Starting deploy process..."
          BUILD_DIR="$(pwd)/.output/public"
          DEPLOY_BRANCH="builds/${{ steps.branch.outputs.branch }}-${{ steps.date.outputs.date }}"
          
          echo "Build directory contents:"
          ls -la "$BUILD_DIR"
          
          # 一時ディレクトリを作成
          TEMP_DIR=$(mktemp -d)
          echo "Copying build files to temp directory: $TEMP_DIR"
          cp -r "$BUILD_DIR"/* "$TEMP_DIR/"
          
          # プロジェクトのルートディレクトリに移動
          cd ..
          
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
          # 新しいブランチを作成
          git checkout --orphan $DEPLOY_BRANCH
          git reset --hard
          
          # 全てのファイルを削除（.gitは残す）
          find . -mindepth 1 -maxdepth 1 ! -name '.git' -exec rm -rf {} +
          
          # 一時ディレクトリから成果物をコピー
          echo "Copying from temp directory to root"
          cp -r "$TEMP_DIR"/* .
          rm -rf "$TEMP_DIR"
          
          git add .
          git commit -m "Build from ${{ steps.branch.outputs.branch }} at ${{ steps.date.outputs.date }}"
          
          TAG_NAME="build-${{ steps.branch.outputs.branch }}-${{ steps.date.outputs.date }}"
          git tag $TAG_NAME
          
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git
          git push origin $DEPLOY_BRANCH
          git push origin $TAG_NAME

      - name: Show success message
        working-directory: .  # または、この行を完全に削除
        run: |
          echo "✅ Build completed successfully"
          echo "📂 Branch: builds/${{ steps.branch.outputs.branch }}-${{ steps.date.outputs.date }}"
          echo "🏷️ Tag: build-${{ steps.branch.outputs.branch }}-${{ steps.date.outputs.date }}"